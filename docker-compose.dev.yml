version: '3.8'

services:
  # Development DBSBM Bot Service
  dbsbm-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dbsbm-bot-dev
    environment:
      # Discord Configuration
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - TEST_GUILD_ID=${TEST_GUILD_ID}

      # API Configuration
      - API_KEY=${API_KEY}
      - API_SPORTS_KEY=${API_SPORTS_KEY}

      # Database Configuration
      - MYSQL_HOST=mysql-dev
      - MYSQL_USER=${MYSQL_USER:-dbsbm}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DB=${MYSQL_DB:-dbsbm_dev}
      - MYSQL_PORT=3306

      # Redis Configuration
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}

      # Webapp Configuration
      - WEBAPP_PORT=25594
      - FLASK_ENV=development
      - FLASK_DEBUG=1

      # Logging Configuration
      - LOG_LEVEL=DEBUG

      # Environment
      - NODE_ENV=development
    depends_on:
      mysql-dev:
        condition: service_healthy
      redis-dev:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./bot/static:/app/bot/static
      - .:/app  # Mount source code for live reloading
    networks:
      - dbsbm-dev-network
    ports:
      - "25594:25594"  # Webapp port
      - "5678:5678"    # Debug port
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:25594/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "bot/main.py"]

  # Development MySQL Database
  mysql-dev:
    image: mysql:8.0
    container_name: dbsbm-mysql-dev
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DB:-dbsbm_dev}
      - MYSQL_USER=${MYSQL_USER:-dbsbm}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./bot/migrations:/docker-entrypoint-initdb.d
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - dbsbm-dev-network
    ports:
      - "3307:3306"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Development Redis Cache
  redis-dev:
    image: redis:7-alpine
    container_name: dbsbm-redis-dev
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_dev_data:/data
    restart: unless-stopped
    networks:
      - dbsbm-dev-network
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Development Adminer (Database GUI)
  adminer:
    image: adminer:latest
    container_name: dbsbm-adminer
    ports:
      - "8080:8080"
    networks:
      - dbsbm-dev-network
    depends_on:
      - mysql-dev

  # Development Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dbsbm-redis-commander
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    ports:
      - "8081:8081"
    networks:
      - dbsbm-dev-network
    depends_on:
      - redis-dev

volumes:
  mysql_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  dbsbm-dev-network:
    driver: bridge
