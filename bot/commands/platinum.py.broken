import logging
import discord
from discord import Interaction, app_commands
from discord.ext import commands
from typing import Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class PlatinumCog(commands.Cog):
    """Platinum tier advanced features commands."""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        
    async def cog_app_command_error(self, interaction: Interaction, error: app_commands.AppCommandError):
        """Handle errors for Platinum commands."""
        if isinstance(error, app_commands.MissingPermissions):
            await interaction.response.send_message(
                "‚ùå You don't have permission to use this command.", ephemeral=True
            )
        else:
            logger.error(f"Error in Platinum command: {error}")
            await interaction.response.send_message(
                "‚ùå An error occurred while processing your command.", ephemeral=True
            )

    @app_commands.command(name="platinum", description="Check Platinum tier status or upgrade")
    async def platinum_status(self, interaction: Interaction):
        """Check Platinum tier status or direct to subscription page."""
        try:
            guild_id = interaction.guild_id
            user = interaction.user
            
            # Check if user has authorized role
            guild_settings = await self.bot.admin_service.get_guild_settings(guild_id)
            if guild_settings and guild_settings.get('authorized_role'):
                authorized_role_id = guild_settings['authorized_role']
                has_authorized_role = any(role.id == authorized_role_id for role in user.roles)
                if not has_authorized_role:
                    await interaction.response.send_message(
                        "‚ùå You need the authorized user role to use this command.", ephemeral=True
                    )
                    return
            
            # Check if guild has Platinum subscription
            is_platinum = await self.bot.platinum_service.is_platinum_guild(guild_id)
            
            if is_platinum:
                # Get feature usage
                webhook_count = await self.bot.platinum_service.get_webhook_count(guild_id)
                export_count = await self.bot.platinum_service.get_export_count(guild_id, datetime.now().month)
                
                embed = discord.Embed(
                    title="üíé Platinum Tier - Active",
                    description="Thank you for your Platinum subscription!",
                    color=0x9b59b6
                )
                
                embed.add_field(
                    name="Active Features",
                    value="‚úÖ Webhook Integrations\n"
                          "‚úÖ Real-Time Alerts\n"
                          "‚úÖ Data Export Tools\n"
                          "‚úÖ Advanced Analytics\n"
                          "‚úÖ Direct API Access",
                    inline=True
                )
                
                embed.add_field(
                    name="Usage",
                    value=f"Webhooks: {webhook_count}/10\n"
                          f"Exports (this month): {export_count}/50",
                    inline=True
                )
                
                embed.add_field(
                    name="Available Commands",
                    value="`/webhook` - Manage webhooks\n"
                          "`/export` - Export data\n"
                          "`/analytics` - View analytics\n"
                          "`/api_*` - Query sports APIs",
                    inline=False
                )
                
                embed.set_footer(text="Your Platinum subscription is active and ready to use!")
                
            else:
                # Check if user is admin
                is_admin = user.guild_permissions.administrator
                
                embed = discord.Embed(
                    title="üíé Platinum Tier - Upgrade Available",
                    description="Unlock advanced features with Platinum tier!",
                    color=0x9b59b6
                )
                
                embed.add_field(
                    name="Platinum Features",
                    value="üîó Webhook Integrations (10 max)\n"
                          "üîî Real-Time Alerts & Notifications\n"
                          "üìä Data Export Tools (50/month)\n"
                          "üìà Advanced Analytics Dashboard\n"
                          "üåê Direct API Access (All Sports)\n"
                          "üì± Mobile App Push Notifications\n"
                          "üìã Excel Analysis & Tax Reporting\n"
                          "üìä Performance Tracking\n"
                          "üîó Third-party Tool Integration\n"
                          "üìà Betting Pattern Analytics",
                    inline=False
                )
                
                embed.add_field(
                    name="Pricing",
                    value="$99.99/month",
                    inline=True
                )
                
                if is_admin:
                    embed.add_field(
                        name="Upgrade Now",
                        value="[Visit Subscription Page](https://your-domain.com/subscription)",
                        inline=True
                    )
                    embed.set_footer(text="Upgrade to Platinum for premium features!")
                else:
                    embed.add_field(
                        name="Contact Admin",
                        value="Please contact a server administrator to upgrade to Platinum tier.",
                        inline=True
                    )
                    embed.set_footer(text="Only administrators can upgrade the server subscription.")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"Error in platinum_status command: {e}")
            await interaction.response.send_message(
                "‚ùå An error occurred while checking Platinum status.", ephemeral=True
            )



    @app_commands.command(name="webhook", description="Create a webhook integration (Platinum only)")
    @app_commands.checks.has_permissions(administrator=True)
    async def create_webhook(
        self,
        interaction: Interaction,
        webhook_name: str,
        webhook_url: str,
        webhook_type: str = app_commands.Choice(
            name="Webhook Type",
            choices=[
                app_commands.Choice(name="Bet Created", value="bet_created"),
                app_commands.Choice(name="Bet Resulted", value="bet_resulted"),
                app_commands.Choice(name="User Activity", value="user_activity"),
                app_commands.Choice(name="Analytics", value="analytics"),
                app_commands.Choice(name="General", value="general")
            ]
        )
    ):
        """Create a webhook integration for the server."""
        try:
            guild_id = interaction.guild_id
            
            # Check Platinum status
            if not await self.bot.platinum_service.is_platinum_guild(guild_id):
                await interaction.response.send_message(
                    "‚ùå This feature requires a Platinum subscription.", ephemeral=True
                )
                return
            
            # Create webhook integration
            success = await self.bot.platinum_service.create_webhook_integration(
                guild_id, webhook_name, webhook_url, webhook_type
            )
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ Webhook Integration Created",
                    description=f"Webhook `{webhook_name}` has been created successfully!",
                    color=0x00ff00
                )
                embed.add_field(name="Name", value=webhook_name, inline=True)
                embed.add_field(name="Type", value=webhook_type, inline=True)
                embed.add_field(name="URL", value=f"`{webhook_url[:50]}...`", inline=False)
                
                # Get current webhook count
                webhooks = await self.bot.platinum_service.get_webhook_integrations(guild_id)
                embed.add_field(name="Total Webhooks", value=f"{len(webhooks)}/10", inline=True)
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(
                    "‚ùå Failed to create webhook integration. You may have reached the limit (10 webhooks).", 
                    ephemeral=True
                )
                
        except Exception as e:
            logger.error(f"Error creating webhook: {e}")
            await interaction.response.send_message(
                "‚ùå An error occurred while creating the webhook integration.", ephemeral=True
            )

    @app_commands.command(name="export", description="Export server data (Platinum only)")
    @app_commands.checks.has_permissions(administrator=True)
    async def export_data(
        self,
        interaction: Interaction,
        export_type: str = app_commands.Choice(
            name="Export Type",
            choices=[
                app_commands.Choice(name="Bets", value="bets"),
                app_commands.Choice(name="Users", value="users"),
                app_commands.Choice(name="Analytics", value="analytics"),
                app_commands.Choice(name="All", value="all")
            ]
        ),
        format: str = app_commands.Choice(
            name="Format",
            choices=[
                app_commands.Choice(name="CSV", value="csv"),
                app_commands.Choice(name="JSON", value="json"),
                app_commands.Choice(name="Excel", value="xlsx")
            ]
        )
    ):
        """Export server data in various formats."""
        try:
            guild_id = interaction.guild_id
            
            # Check Platinum status
            if not await self.bot.platinum_service.is_platinum_guild(guild_id):
                await interaction.response.send_message(
                    "‚ùå This feature requires a Platinum subscription.", ephemeral=True
                )
                return
            
            # Create data export request
            export_id = await self.bot.platinum_service.create_data_export(
                guild_id, export_type, format, interaction.user.id
            )
            
            if export_id:
                embed = discord.Embed(
                    title="üìä Data Export Requested",
                    description="Your data export has been queued for processing.",
                    color=0x00ff00
                )
                embed.add_field(name="Export ID", value=f"#{export_id}", inline=True)
                embed.add_field(name="Type", value=export_type, inline=True)
                embed.add_field(name="Format", value=format, inline=True)
                embed.add_field(
                    name="Status", 
                    value="‚è≥ Processing...\nYou will receive a DM when it's ready.", 
                    inline=False
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(
                    "‚ùå Failed to create export request. You may have reached the limit (50 exports/month).", 
                    ephemeral=True
                )
                
        except Exception as e:
            logger.error(f"Error creating data export: {e}")
            await interaction.response.send_message(
                "‚ùå An error occurred while creating the export request.", ephemeral=True
            )



    @app_commands.command(name="analytics", description="View Platinum analytics (Platinum only)")
    @app_commands.checks.has_permissions(administrator=True)
    async def view_analytics(self, interaction: Interaction):
        """View Platinum feature usage analytics."""
        try:
            guild_id = interaction.guild_id
            
            # Check Platinum status
            if not await self.bot.platinum_service.is_platinum_guild(guild_id):
                await interaction.response.send_message(
                    "‚ùå This feature requires a Platinum subscription.", ephemeral=True
                )
                return
            
            # Get analytics
            analytics = await self.bot.platinum_service.get_feature_analytics(guild_id)
            limits = await self.bot.platinum_service.get_platinum_limits(guild_id)
            
            embed = discord.Embed(
                title="üìà Platinum Analytics",
                description="Feature usage statistics for your server:",
                color=0x9b59b6
            )
            
            if analytics:
                # Show top 5 most used features
                for i, feature in enumerate(analytics[:5], 1):
                    embed.add_field(
                        name=f"#{i} {feature['feature_name'].replace('_', ' ').title()}",
                        value=f"**{feature['usage_count']}** uses\nLast: {feature['last_used'].strftime('%Y-%m-%d')}",
                        inline=True
                    )
            else:
                embed.add_field(
                    name="No Data",
                    value="No feature usage data available yet.",
                    inline=False
                )
            
            # Show limits
            if limits:
                limits_text = []
                for key, value in limits.items():
                    if value:
                        feature_name = key.replace('max_', '').replace('_platinum', '').replace('_', ' ').title()
                        limits_text.append(f"**{feature_name}**: {value}")
                
                if limits_text:
                    embed.add_field(
                        name="Platinum Limits",
                        value="\n".join(limits_text),
                        inline=False
                    )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            logger.error(f"Error viewing analytics: {e}")
            await interaction.response.send_message(
                "‚ùå An error occurred while loading analytics.", ephemeral=True
            )


async def setup(bot: commands.Bot):
    """Set up the Platinum cog."""
    await bot.add_cog(PlatinumCog(bot))
    logger.info("Platinum cog loaded successfully") 